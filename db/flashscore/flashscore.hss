<?xml version="1.0" encoding="utf-8"?>
<SerializableScraperProject xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Version>28</Version>
  <Assignments>
    <Code>Main = {&#xD;
	â€¦&#xD;
}</Code>
  </Assignments>
  <TextGatherers />
  <Code>
    <Code />
  </Code>
  <HorizontalDatabase>
    <Schema xsi:type="SerializableObjectType">
      <Members />
    </Schema>
  </HorizontalDatabase>
  <Kinds />
  <Extractors>
    <SerializableGatherer>
      <Name>HTML</Name>
      <Value>var result = function (element) {&#xD;
    return element.nodeType === 1 ? element.outerHTML : element.nodeValue;&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>true</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Link</Name>
      <Value>var result = function (element) {&#xD;
    var upperTag = function (element) {&#xD;
        return element.tagName ? element.tagName.toUpperCase() : element.tagName;&#xD;
    };&#xD;
&#xD;
    var linkOf = function (element) {&#xD;
        return element &amp;&amp; element.href &amp;&amp; (element.protocol === "http:" || element.protocol === "https:" || element.protocol == "file:" || element.protocol == "ftp:") ? element.href : null;&#xD;
    };&#xD;
&#xD;
    var original = element;&#xD;
&#xD;
    while (element &amp;&amp; (!element.tagName || upperTag(element) !== 'A'))&#xD;
        element = element.parentNode;&#xD;
&#xD;
    var result = linkOf(element);&#xD;
&#xD;
    if (!result) {&#xD;
        if (original.children.length == 1) {&#xD;
            var child = original.children[0];&#xD;
&#xD;
            if (upperTag(child) === 'A') {&#xD;
                result = linkOf(child);&#xD;
&#xD;
                if (!result) {&#xD;
                    if (child.children.length == 1) {&#xD;
                        child = child.children[0];&#xD;
&#xD;
                        if (upperTag(child) === 'A')&#xD;
                            result = linkOf(child);&#xD;
                    }&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
&#xD;
    return result;&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>true</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Number</Name>
      <Value>var result = function (element) {&#xD;
    var getText = function () {&#xD;
        return element.nodeType === 1 ? element.innerText : element.nodeValue;&#xD;
    };&#xD;
&#xD;
    var regex = /-?(?=[1-9]|0(?!\d))[\d\,]+(\.\d+)?/;&#xD;
    var first = regex.exec(getText(element));&#xD;
    return first &amp;&amp; first.length ? first[0] : null;&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>OwnText</Name>
      <Value>var result = function (element) {&#xD;
    var text = [].reduce.call(element.childNodes || [], (a, b) =&gt; a + (b.nodeType === 3 ? b.textContent : ''), '');&#xD;
    return text.trim();&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Path</Name>
      <Value>var result = function (element) {&#xD;
    return window.___getPath(element);&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Src</Name>
      <Value>var result = function (element) {&#xD;
    return element.src || "";&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Tag</Name>
      <Value>var result = function (element) {&#xD;
    var upperTag = function (element) {&#xD;
        return element.nodeType === 1 ? element.tagName.toUpperCase() : "HS-NODE";&#xD;
    };&#xD;
&#xD;
    return upperTag(element);&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Text</Name>
      <Value>var result = function (element) {&#xD;
    var upperTag = function (element) {&#xD;
        return element.tagName ? element.tagName.toUpperCase() : element.tagName;&#xD;
    };&#xD;
&#xD;
    var getElementText = function (e) {&#xD;
        switch (upperTag(e)) {&#xD;
            case 'SELECT':&#xD;
                if (e.selectedOptions &amp;&amp; e.selectedOptions.length === 1)&#xD;
                    return e.selectedOptions[0].innerText;&#xD;
            default:&#xD;
                return e.innerText;&#xD;
        }&#xD;
    };&#xD;
&#xD;
    var text = element.nodeType === 1 ? getElementText(element) : element.nodeValue;&#xD;
    return text ? text.trim() : "";&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>true</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>URL</Name>
      <Value>var result =  function (element) {&#xD;
    return element.ownerDocument.defaultView.location.href;&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>Value</Name>
      <Value>var result = function (element) {&#xD;
    return element.value || element.getAttribute('value');&#xD;
};&#xD;
&#xD;
result.noCache = false;&#xD;
return result;&#xD;
</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
  </Extractors>
  <KindGatherers>
    <SerializableGatherer>
      <Name>childrenLen</Name>
      <Value>var result = function (element) {&#xD;
    return { val: element.nodeType === 1 ? element.children.length : 0 };&#xD;
};&#xD;
&#xD;
result.score = 0.7; // Default&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    var result = {};&#xD;
    var list = element.classList;&#xD;
    var len = list.length;&#xD;
&#xD;
    for (var i = 0; i &lt; len; i++)&#xD;
        result[list[i]] = true;&#xD;
&#xD;
    return result;&#xD;
};&#xD;
&#xD;
result.score = 0.73;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class1</Name>
      <Value>var result = window.___makeRelatedGatherer('class', function (element) {&#xD;
    return element.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.87;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class2</Name>
      <Value>var result = window.___makeRelatedGatherer('class', function (element) {&#xD;
    return element.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.87;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>class3</Name>
      <Value>var result = window.___makeRelatedGatherer('class', function (element) {&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.9;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    return { val: typeof element.className === 'string' ? element.className : null };&#xD;
};&#xD;
&#xD;
result.score = 0.91;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes1</Name>
      <Value>var result = window.___makeRelatedGatherer('classes', function (element) {&#xD;
    return element.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.95;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes2</Name>
      <Value>var result = window.___makeRelatedGatherer('classes', function (element) {&#xD;
    return element.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.95;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>classes3</Name>
      <Value>var result = window.___makeRelatedGatherer('classes', function (element) {&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.81;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>colIndex</Name>
      <Value>var result = function (element) {&#xD;
    var maxUp = 5;&#xD;
&#xD;
    function closestTd(element) {&#xD;
        for (var up = 0; up &lt; maxUp; up++) {&#xD;
            if (!element) return null;&#xD;
            if (/^t[dh]$/i.test(element.nodeName))&#xD;
                return element;&#xD;
            element = element.parentNode;&#xD;
        }&#xD;
&#xD;
        return null;&#xD;
    }&#xD;
&#xD;
    function colSpan(col) {&#xD;
        return parseInt((col &amp;&amp; col.nodeType == 1 &amp;&amp; /^t[dh]$/i.test(element.nodeName)) ? (col.getAttribute('colSpan') || 1) : 0);&#xD;
    }&#xD;
&#xD;
    function endIndex(element) {&#xD;
        var colPos = colSpan(element);&#xD;
&#xD;
        while (element) {&#xD;
            element = element.previousSibling;&#xD;
            colPos += colSpan(element);&#xD;
        }&#xD;
&#xD;
        return colPos;&#xD;
    }&#xD;
&#xD;
    element = closestTd(element);&#xD;
&#xD;
    if (element)&#xD;
        return { val: endIndex(element.previousSibling) };&#xD;
    else&#xD;
        return {};&#xD;
};&#xD;
&#xD;
result.score = 0.7; // Default&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>color</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    return { val: window.getComputedStyle(element).color };&#xD;
};&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>font</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    return { val: window.getComputedStyle(element)['font-family'] };&#xD;
};&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>header</Name>
      <Value>var result = function header(element) {&#xD;
    var upperTag = function (element) {&#xD;
        return element.tagName ? element.tagName.toUpperCase() : element.tagName;&#xD;
    };&#xD;
&#xD;
    var getColumnIndex = function (e) {&#xD;
        var maxLevels = 4;&#xD;
&#xD;
        while (e &amp;&amp; upperTag(e) !== 'TD' &amp;&amp; maxLevels &gt; 0) {&#xD;
            e = e.parentElement;&#xD;
            maxLevels--;&#xD;
        }&#xD;
&#xD;
        if (e &amp;&amp; upperTag(e) === 'TD') {&#xD;
            var index = 0;&#xD;
            while ((e = e.previousElementSibling)) {&#xD;
                index += e.colSpan || 1;&#xD;
            }&#xD;
            return index;&#xD;
        }&#xD;
        else&#xD;
            return -1;&#xD;
    };&#xD;
&#xD;
    var colIndex = getColumnIndex(element);&#xD;
&#xD;
    if (colIndex !== -1) {&#xD;
        while (element &amp;&amp; upperTag(element) !== 'TABLE')&#xD;
            element = element.parentElement;&#xD;
&#xD;
        if (element &amp;&amp; upperTag(element) === 'TABLE') {&#xD;
            var tds = element.querySelectorAll('th,thead td');&#xD;
            var index = 0;&#xD;
&#xD;
            for (var td of tds) {&#xD;
                index += td.colSpan || 1;&#xD;
&#xD;
                if (index &gt; colIndex) &#xD;
                    return { val: (td.innerText || "").trim() };&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
&#xD;
    return {};&#xD;
};&#xD;
&#xD;
result.score = 0.9;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    return { val: element.id };&#xD;
};&#xD;
&#xD;
result.score = 0.98;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id1</Name>
      <Value>var result = window.___makeRelatedGatherer('id', function (element) {&#xD;
    return element.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.91;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id2</Name>
      <Value>var result = window.___makeRelatedGatherer('id', function (element) {&#xD;
    return element.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.91;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>id3</Name>
      <Value>var result = window.___makeRelatedGatherer('id', function (element) {&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 0.88;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>indexes</Name>
      <Value>var result = function (element) {&#xD;
    function getElementIndex(node) {&#xD;
        var index = 0;&#xD;
        while ((node = node.previousSibling)) {&#xD;
            index++;&#xD;
        }&#xD;
        return index;&#xD;
    }&#xD;
&#xD;
    var result = {};&#xD;
    var level = 0;&#xD;
    var levels = 3;&#xD;
&#xD;
    while (element &amp;&amp; level &lt; levels) {&#xD;
        result[level] = getElementIndex(element);&#xD;
        level++;&#xD;
        element = element.parentElement&#xD;
    }&#xD;
&#xD;
    return result;&#xD;
};&#xD;
&#xD;
result.score = 0.86;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>names</Name>
      <Value>var result = function (element) {&#xD;
    function getElementName(node) {&#xD;
        return node.nodeType === 1 ? (node.name || node.getAttribute('name')) : null;&#xD;
    }&#xD;
&#xD;
    var result = {};&#xD;
    var level = 0;&#xD;
    var levels = 3;&#xD;
&#xD;
    while (element &amp;&amp; level &lt; levels) {&#xD;
        var name = getElementName(element);&#xD;
        if (name) result[level] = name;&#xD;
        level++;&#xD;
        element = element.parentElement&#xD;
    }&#xD;
&#xD;
    return result;&#xD;
};&#xD;
&#xD;
result.score = 0.75;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>prevText</Name>
      <Value>var result = function (element) {&#xD;
    var prevTextOf = function (e) {&#xD;
        var maxDepth = 0;&#xD;
        var maxLength = 128;&#xD;
&#xD;
        while (e &amp;&amp; !e.previousElementSibling &amp;&amp; maxDepth &gt; 0) {&#xD;
            e = e.parentElement;&#xD;
            maxDepth--;&#xD;
        }&#xD;
&#xD;
        if (e &amp;&amp; e.previousElementSibling) {&#xD;
            var fullText = e.previousElementSibling.innerText;&#xD;
&#xD;
            if (fullText.length &lt; maxLength)&#xD;
                return { val: fullText };&#xD;
&#xD;
        }&#xD;
&#xD;
        return null;&#xD;
    }&#xD;
&#xD;
    var maxParents = 3;&#xD;
&#xD;
    do {&#xD;
        var prevText = prevTextOf(element);&#xD;
&#xD;
        if (prevText)&#xD;
            return prevText;&#xD;
&#xD;
        if (element.parentElement &amp;&amp; maxParents &gt; 0) {&#xD;
            element = element.parentElement;&#xD;
            maxParents--;&#xD;
        }&#xD;
        else&#xD;
            return null;&#xD;
    }&#xD;
    while (true);&#xD;
};&#xD;
&#xD;
result.score = 0.7; // Default&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag</Name>
      <Value>var result = function (element) {&#xD;
    var upperTag = function (element) {&#xD;
        return element.nodeType === 1 ? element.tagName.toUpperCase() : "HS-NODE";&#xD;
    };&#xD;
&#xD;
    return { val: upperTag(element) };&#xD;
};&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag1</Name>
      <Value>var result = window.___makeRelatedGatherer('tag', function (element) {&#xD;
    return element.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag2</Name>
      <Value>var result = window.___makeRelatedGatherer('tag', function (element) {&#xD;
    return element.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>tag3</Name>
      <Value>var result = window.___makeRelatedGatherer('tag', function (element) {&#xD;
    return element.parentNode.parentNode.parentNode;&#xD;
});&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>text</Name>
      <Value>var result = function (element) {&#xD;
&#xD;
    if (element.nodeType !== 1)&#xD;
        return null;&#xD;
&#xD;
    if (window.___textTags.has(element.tagName.toUpperCase()))&#xD;
        return null;&#xD;
&#xD;
    var text = element.innerText;&#xD;
&#xD;
    if (!text)&#xD;
        text = (element.querySelector('svg title') || {}).innerHTML;&#xD;
&#xD;
    if (text &amp;&amp; text.length &gt; 100)&#xD;
        return null;&#xD;
&#xD;
    return { val: text };&#xD;
};&#xD;
&#xD;
result.score = 0.2;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>title</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    return { val: element.getAttribute('title') };&#xD;
};&#xD;
&#xD;
result.score = 0.7;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
    <SerializableGatherer>
      <Name>visible</Name>
      <Value>var result = function (element) {&#xD;
    if (element.nodeType !== 1)&#xD;
        element = element.parentElement;&#xD;
&#xD;
    return { val: element.offsetParent !== null };&#xD;
};&#xD;
&#xD;
result.score = 1;&#xD;
return result;</Value>
      <Visible>false</Visible>
      <Locked>true</Locked>
    </SerializableGatherer>
  </KindGatherers>
  <Scripts />
  <Queries />
  <JsonReaders />
  <AjaxReaders />
  <Settings />
  <BlockList>*://*.doubleclick.net/*&#xD;
*://*.amazon-adsystem.com/*&#xD;
*://*.google-analytics.com/*&#xD;
*://*.googlesyndication.com/*&#xD;
*://*.advertising.com/*&#xD;
*://*.imrworldwide.com/*&#xD;
*://*.quantserve.com/*&#xD;
*://*.googleadservices.com/*&#xD;
*://*.scorecardresearch.com/*</BlockList>
  <DynamicInject />
  <ProjectCode>62f4e08e7f95c1c72309284c41a72e78</ProjectCode>
</SerializableScraperProject>